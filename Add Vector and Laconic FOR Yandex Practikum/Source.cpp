/*Ќе так давно вы разбивали строку на слова. ¬ заготовке кода Ч решение той задачи. 
“еперь примените вектор, чтобы сохранить все слова в вектор. «атем их нужно вывести на экран.
¬ектор строк назовите words Ч им€ переменной будет учитыватьс€ при проверке.
ѕосле того, как разбиение выполнено, добавьте ещЄ один цикл дл€ вывода слов:
for (string word : words) {
    cout << '[' << word << ']' << endl;
} 
ќграничени€
ѕеременна€, в которую сохран€ютс€ слова запроса, должна называтьс€ words и иметь тип vector<string>. 
—лова в ней должны идти в таком же пор€дке, как и в исходной строке.
‘ормат ввода
Ќа вход подаЄтс€ строка, в которой все слова разделены одним пробелом. ¬ начале и в конце строки пробелов нет.
‘ормат вывода
Ќа каждой строчке выведите слово в квадратных скобках. ¬ыводите слова в том пор€дке, в котором они поступали на вход. 
ƒл€ вывода можете использовать цикл из услови€.*/


#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main() {
    /* объ€вл€ем переменную дл€ хранени€ строки вводимой пользователем */
    string query;
    /* FOR SUPPORT: считываем строку целиком */
    getline(cin, query);
    

    /* объ€вл€ем вектор строк дл€ хранени€ слов */
    vector<string> words;
    /* объ€вл€ем строку дл€ хранени€ слова */
    string word;
    /* начинаем цикл от 0 до размера строки (проходим посимвольно по всей строке) */
    for (char c : query) {
        /* условие на выполнение блока:
         * символ это пробел */
        if (c == ' ') {
            /* добавл€ем слово в конец вектора слов */
            words.push_back(word);
            /* присваиваем переменной пустую строку, т.е. начинаем новое слово */
            word = ""s;
            /* условие на выполнение блока (когда все услови€ выше - не верны):
             * символ это не пробел (обратное условие) */
        }
        else {
            /* добавл€ем символ к строке.
             * Ётим блоком мы собираем слово в переменной word */
            word += c;
        }
    }
    /* добавл€ем последнее слово word в конец вектора words */
    words.push_back(word);

    /* проходим по всем словам из вектора слов */
    for (string word : words) {
        /* выводим слово между [ и ] */
        cout << '[' << word << ']' << endl;
    }
}